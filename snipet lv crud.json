{

	"crud": {
		"prefix": "crudlv",
		"body": [
			"<?php",
			"",
			"namespace App\\Http\\Controllers\\Master;",
			"",
			"use App\\Http\\Controllers\\Controller;",
			"use Illuminate\\Http\\Request;",
			"use App\\\\$2;",
			"use Upload;",
			"use PDF;",
			"",
			"class $1 extends Controller",
			"{",
			"    public function __construct(){",
			"       //\\$this->middleware('auth');",
			"       //\\$this->path_image = 'public/images/package/'",
			"    }",
			"    private function rules(){",
			"        return  [",
			"            'name'           => 'required',",
			"        ];",
			"    }",
			"",
			"    public function get(Request \\$req){",
			"       \\$query = $2::query();",
			"        //if(\\$req->has('service')){",
			"          // \\$query->where('service_id',\\$req->service);",
			"        //}",
			"       \\$data =\\$query->get();",
			"        return view('${3:view}.index',compact('data'));",
			"    }",
			"",
			"    public function add(){",
			"        ",
			"        return view('${3:view}.add');",
			"    }",
			"",
			"    public function create(Request \\$req){",
			"       \\$data           =\\$req->validate(\\$this->rules());",
			"       \\$data['images'] = (\\$req->hasfile('images')) ? Upload::upload_image(\\$req->file('images'),null,\\$this->path_image) : 'default.jpg';",
			"        $2::create(\\$data);",
			"        return redirect()->route('${4:route}.index')->withSuccess('${5:message} Created');",
			"    }",
			"    public function edit(\\$id){",
			"       \\$data = $2::findOrFail(\\$id);",
			"        return view('${3:view}.form', compact('data'));",
			"    }",
			"",
			"    public function update(Request \\$req,\\$id){",
			"       \\$item           = $2::findOrFail(\\$id);",
			"       \\$data              =\\$req->validate(\\$this->rules());",
			"       \\$data['images']     = (\\$req->hasfile('images')) ? Upload::upload_image(\\$req->file('images'),\\$item->images,\\$this->path_image) :\\$item->images;",
			"       \\$item->update(\\$data);",
			"        return redirect()->route('${4:route}.index')->withSuccess('${5:message} Updated');",
			"    }",
			"",
			"    public function delete(\\$id){",
			"       \\$item = $2::findOrFail(\\$id);",
			"       \\$item->delete();",
			"        Upload::delete_image(\\$item->images,\\$this->path_image);",
			"        return redirect()->route('${4:route}.index')->withSuccess('${5:message} Deleted');",
			"    }",
			"",
			"    public function multi_delete(Request \\$req){",
			"       \\$get_data = $2::whereIn('id',\\$req->ids)->get();",
			"        foreach (\\$get_data as\\$item ) {",
			"           \\$data = $2::findOrFail(\\$item['id'])->delete();",
			"            Upload::delete_image(\\$item['images'],\\$this->path_image);",
			"        }",
			"        return redirect()->route('${4:route}.index')->withSuccess('${5:message} Deleted');",
			"    }",
			"",
			"    public function exportpdf(){",
			"       \\$data = $2::all();",
			"       \\$pdf = PDF::loadView('${3:view}.pdf', compact('data'));",
			"        return\\$pdf->download('$5.pdf');",
			"    }",
			"",
			"}",
			""
		],
		"description": "crud"
	},

	"route": {
		"prefix": "routelv",
		"body": [
			"Route::group(['namespace' => '${1:namespace}','prefix'=>'${2:prefix}'], function () {",
			"    Route::get('/','${3:controller}@get')->name('${4:route}.index'); ",
			"    Route::get('/add','${3:controller}@add')->name('${4:route}.add');",
			"    Route::put('/{id}','${3:controller}@update')->name('${4:route}.update');",
			"    Route::delete('/delete/{id}','${3:controller}@delete')->name('${4:route}.delete');",
			"    Route::get('/edit/{id}','${3:controller}@edit')->name('${4:route}.edit');",
			"    Route::post('/','${3:controller}@create')->name('${4:route}.create');",
			"    Route::delete('/multidelete','${3:controller}@multi_delete')->name('${4:route}.multidelete');    ",
			"    Route::get('/exportpdf','${3:controller}@exportpdf')->name('${4:route}.pdf');",
			"});"
		],
		"description": "route"
	},

	"input": {
		"prefix": "inputblade",
		"body": [
			"<div class=\"form-group\">",
			"    <label for=\"exampleFormControlInput1\">$1</label>",
			"    <input",
			"        placeholder=\"$1\"",
			"        type=\"${2:text|email|password|file}\"",
			"        class=\"form-control bg-light @error('$3') is-invalid @enderror\"",
			"        id=\"exampleFormControlInput1\"",
			"        name=\"$3\"",
			"        value=\"{{old('$3') ?? \\$data->$3 ?? null}}\"",
			"        >",
			"        @error('$3')",
			"        <div class=\"invalid-feedback\">",
			"            {{$message}}",
			"        </div>",
			"        @enderror",
			"</div>"
		],
		"description": "input text email password"
	},

	"select blade": {
		"prefix": "selectblade",
		"body": [
			"<div class=\"form-group\">",
			"    <label for=\"exampleFormControlInput1\">${1:Label}</label>",
			"    <select",
			"        required",
			"        name=\"$2\"",
			"        class=\"form-control bg-light @error('$2') is-invalid @enderror\"",
			"        id=\"exampleFormControlSelect1\">",
			"        <option disabled selected hidden>${1:Label}</option>",
			"        @foreach (\\$collection as \\$item)",
			"        <option {{ old('$2',\\$data->$2 ?? '')  == \\$item->id ?'selected': null }} value=\"{{\\$item->id}}\">{{\\$item->name}}</option>",
			"        @endforeach",
			"    </select>",
			"    @error('$2')",
			"    <div class=\"invalid-feedback\">",
			"        {{\\$message}}",
			"    </div>",
			"    @enderror",
			"</div>"
		],
		"description": "select blade"
	},


	"text blade": {
		"prefix": "textareablade",
		"body": [
			"<div class=\"form-group\">",
			"    <label for=\"exampleFormControlTextarea1\">$1</label>",
			"    <textarea",
			"        value=\"{{ old('$2')}}\"",
			"        class=\"form-control bg-light  @error('$2') is-invalid @enderror\"",
			"        name=\"$2\"",
			"        id=\"exampleFormControlTextarea1\"",
			"        placeholder=\"$1\"",
			"        rows=\"3\">{{old('$2') ?? \\$data->$2 ?? null}}</textarea>",
			"    @error('$2')",
			"    <div class=\"invalid-feedback\">",
			"        {{\\$message}}",
			"    </div>",
			"    @enderror",
			"</div>"
		],
		"description": "text blade"
	}
}